// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLinksShortener is a mock of LinksShortener interface.
type MockLinksShortener struct {
	ctrl     *gomock.Controller
	recorder *MockLinksShortenerMockRecorder
}

// MockLinksShortenerMockRecorder is the mock recorder for MockLinksShortener.
type MockLinksShortenerMockRecorder struct {
	mock *MockLinksShortener
}

// NewMockLinksShortener creates a new mock instance.
func NewMockLinksShortener(ctrl *gomock.Controller) *MockLinksShortener {
	mock := &MockLinksShortener{ctrl: ctrl}
	mock.recorder = &MockLinksShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinksShortener) EXPECT() *MockLinksShortenerMockRecorder {
	return m.recorder
}

// CreateShortUrl mocks base method.
func (m *MockLinksShortener) CreateShortUrl(longUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortUrl", longUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortUrl indicates an expected call of CreateShortUrl.
func (mr *MockLinksShortenerMockRecorder) CreateShortUrl(longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortUrl", reflect.TypeOf((*MockLinksShortener)(nil).CreateShortUrl), longUrl)
}

// GetLongUrl mocks base method.
func (m *MockLinksShortener) GetLongUrl(shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongUrl", shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongUrl indicates an expected call of GetLongUrl.
func (mr *MockLinksShortenerMockRecorder) GetLongUrl(shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongUrl", reflect.TypeOf((*MockLinksShortener)(nil).GetLongUrl), shortUrl)
}
