// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: internal/app/grpc/proto/links_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinksServiceClient is the client API for LinksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinksServiceClient interface {
	CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlResponse, error)
	GetLongUrl(ctx context.Context, in *GetLongUrlRequest, opts ...grpc.CallOption) (*GetLongUrlResponse, error)
}

type linksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinksServiceClient(cc grpc.ClientConnInterface) LinksServiceClient {
	return &linksServiceClient{cc}
}

func (c *linksServiceClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlResponse, error) {
	out := new(CreateShortUrlResponse)
	err := c.cc.Invoke(ctx, "/grpc.linksService/CreateShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceClient) GetLongUrl(ctx context.Context, in *GetLongUrlRequest, opts ...grpc.CallOption) (*GetLongUrlResponse, error) {
	out := new(GetLongUrlResponse)
	err := c.cc.Invoke(ctx, "/grpc.linksService/GetLongUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServiceServer is the server API for LinksService service.
// All implementations must embed UnimplementedLinksServiceServer
// for forward compatibility
type LinksServiceServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlResponse, error)
	GetLongUrl(context.Context, *GetLongUrlRequest) (*GetLongUrlResponse, error)
	mustEmbedUnimplementedLinksServiceServer()
}

// UnimplementedLinksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinksServiceServer struct {
}

func (UnimplementedLinksServiceServer) CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedLinksServiceServer) GetLongUrl(context.Context, *GetLongUrlRequest) (*GetLongUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongUrl not implemented")
}
func (UnimplementedLinksServiceServer) mustEmbedUnimplementedLinksServiceServer() {}

// UnsafeLinksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinksServiceServer will
// result in compilation errors.
type UnsafeLinksServiceServer interface {
	mustEmbedUnimplementedLinksServiceServer()
}

func RegisterLinksServiceServer(s grpc.ServiceRegistrar, srv LinksServiceServer) {
	s.RegisterService(&LinksService_ServiceDesc, srv)
}

func _LinksService_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.linksService/CreateShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksService_GetLongUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceServer).GetLongUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.linksService/GetLongUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceServer).GetLongUrl(ctx, req.(*GetLongUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinksService_ServiceDesc is the grpc.ServiceDesc for LinksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.linksService",
	HandlerType: (*LinksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _LinksService_CreateShortUrl_Handler,
		},
		{
			MethodName: "GetLongUrl",
			Handler:    _LinksService_GetLongUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/grpc/proto/links_service.proto",
}
